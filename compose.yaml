services:
  web:
    container_name: burger-api
    image: "ghcr.io/matthewrv/burger-api:v0.3.0-rc0"
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app:$${PYTHONPATH}
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    cap_add:
      - SYS_PTRACE
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:8000/api/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  db:
    container_name: burger-db
    image: "postgres:17.4-alpine"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - postgres-data:/var/lib/postgresql/data

  rabbitmq:
    container_name: burger-broker
    image: "rabbitmq:4.1.0-alpine"
    expose:
      - 5672
      - 15692
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s

  grafana:
    container_name: burger-grafana
    restart: unless-stopped
    image: "grafana/grafana-oss:12.0.0-ubuntu"
    ports:
      - '3000:3000'
    volumes:
      - grafana-data:/var/lib/grafana

  prometheus:
    container_name: burger-prometheus
    restart: unless-stopped
    image: "prom/prometheus:v3.3.1"
    expose:
      - 9090
    volumes:
      - prometheus-data:/prometheus
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

volumes:
  postgres-data:
  grafana-data:
  prometheus-data:
